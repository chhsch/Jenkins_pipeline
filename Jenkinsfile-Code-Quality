pipeline {
    agent any
        environment {
        PATH = "/Users/hathaway/.local/bin:$PATH"
    }
    stages {
        stage('environment variables') {
            steps {
                sh 'printenv'
                sh 'ls -la'
            }
        }
        
        stage('Pull Request Number') {
            when {
                changeRequest target: 'main'
            }
            steps {
                echo "PR: ${CHANGE_ID}"
            }
        }            
        // stage('Setup') {
        //     steps {
        //         sh 'export PATH="$HOME/.local/bin:$PATH" && poetry install --with dev'
        //     }
        // }

        // stage('Test') {
        //     steps {
        //         sh 'echo "Jenkins PATH: $PATH"'
        //         sh "poetry run pytest"
        //     }
        // }
        // stage('Setup') {
        //     steps {
        //         sh '''
        //             export PATH="$HOME/.local/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"
        //             echo "Updated PATH in Setup: $PATH"
        //             which poetry || echo "Poetry not found"
        //             poetry --version
        //             poetry env remove python || echo "No existing virtualenv"
        //             poetry install --with dev
        //         '''
        //     }
        // }
        stage('Setup') {
    steps {
        sh '''
            export PATH="$HOME/.local/bin:$PATH"
            echo "Updated PATH in Setup: $PATH"
            which poetry || echo "Poetry not found"
            poetry --version
            poetry env remove python || echo "No existing virtualenv"
            poetry cache clear --all pypoetry  # Clear poetry cache
            poetry install --with dev
        '''
    }
}


        // stage('Test') {
        //     steps {
        //         sh '''
        //             echo "Jenkins PATH: $PATH"
        //             which poetry
        //             source $(poetry env info --path)/bin/activate
        //             poetry run pytest
        //         '''
        //     }
        // }
        stage('Test') {
    steps {
        sh '''
            echo "Jenkins PATH: $PATH"
            which poetry
            source $(poetry env info --path)/bin/activate
            pip install --upgrade pytest  # Force reinstallation of pytest
            pip list | grep pytest  # Verify that pytest is installed
            poetry run pytest  # Run tests
        '''
    }
}

    }
}